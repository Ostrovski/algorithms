(define (exp b n)
  (define (exp-iter b n a) 
    (cond 
      ((= n 0) a)
      ((= (remainder n 2) 0) (exp-iter (* b b) (/ n 2) a))
      (else (exp-iter b (- n 1) (* a b)))
    )
  )

  (exp-iter b n 1)
)

(exp 2 0)
(exp 2 1)
(exp 2 2)
(exp 2 3)
(exp 2 4)
(exp 2 5)
(exp 2 6)
(exp 2 7)
(exp 2 8)
(exp 2 9)
(exp 2 10)
(exp 2 11)
(exp 2 12)
(exp 2 13)
(exp 2 14)
(exp 2 15)
(exp 2 16)
(exp 2 17)
(exp 2 18)
(exp 2 19)
(exp 2 20)

(exp 3 0)
(exp 3 1)
(exp 3 2)
(exp 3 3)
(exp 3 4)
(exp 3 5)
(exp 3 6)
(exp 3 7)
(exp 3 8)
(exp 3 9)
(exp 3 10)
(exp 3 11)
(exp 3 12)
(exp 3 13)
(exp 3 14)
(exp 3 15)
(exp 3 16)
(exp 3 17)
(exp 3 18)
(exp 3 19)
(exp 3 20)

