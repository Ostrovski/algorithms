(define (filtered-accumulate filter combiner null-value term a next b)
  (if (> a b) 
    null-value
    (if (filter (term a))
      (filtered-accumulate filter combiner (combiner (term a) null-value) term (next a) next b)
      (filtered-accumulate filter combiner null-value term (next a) next b)
    )
  )
)

(define (filtered-accumulate filter combiner null-value term a next b)
  (if (> a b) 
    null-value
    (if (filter (term a))
      (combiner (term a) (filtered-accumulate filter combiner null-value term (next a) next b))
      (filtered-accumulate filter combiner null-value term (next a) next b)
    )
  )
)

(define (sum term a next b)
  (define (filter x) true)
  (define (combiner v acc) (+ v acc))
  (filtered-accumulate filter combiner 0 term a next b)
)

(define (term x) x)
(define (next x) (+ x 1))
(sum term 0 next 1)
(sum term 1 next 10)
(sum term 2 next 10)
(sum term 3 next 10)
(sum term 4 next 10)
(sum term 5 next 10)
(sum term 6 next 10)

(define (sum-odd term a next b)
  (define (filter x) (= (remainder x 2) 0))
  (define (combiner v acc) (+ v acc))
  (filtered-accumulate filter combiner 0 term a next b)
)
(sum-odd term 0 next 1)
(sum-odd term 1 next 10)
(sum-odd term 2 next 10)
(sum-odd term 3 next 10)
(sum-odd term 4 next 10)
(sum-odd term 5 next 10)
(sum-odd term 6 next 10)

(define (product term a next b)
  (define (filter x) true)
  (define (combiner v acc) (* v acc))
  (filtered-accumulate filter combiner 1 term a next b)
)
(product term 0 next 1)
(product term 1 next 10)
(product term 2 next 10)
(product term 3 next 10)
(product term 4 next 10)
(product term 5 next 10)
(product term 6 next 10)

